{"version":3,"sources":["actions/index.js","helpers/index.js","reducers/index.js","reducers/successReducer.js","reducers/guessedWordsReducer.js","reducers/secretWordReducer.js","configureStore.js","GuessedWords.js","Congrats.js","Input.js","App.js","serviceWorker.js","index.js"],"names":["actionTypes","guessWord","guessedWord","dispatch","getState","secretWord","letterMatchCount","secretLetterSet","Set","split","guessedLetterSet","Object","toConsumableArray","filter","letter","has","length","getLetterMatchCount","type","payload","combineReducers","success","state","arguments","undefined","guessedWords","action","concat","middlewares","ReduxThunk","createStoreWithMiddleware","applyMiddleware","apply","createStore","rootReducer","GuessedWords","props","contents","react_default","a","createElement","data-test","guessedWordsRows","map","word","index","key","Congrats","className","UnconnectedInput","_Component","_getPrototypeOf2","_this","classCallCheck","this","_len","args","Array","_key","possibleConstructorReturn","getPrototypeOf","call","inputBox","React","createRef","submitGuessedWord","event","preventDefault","current","value","alert","inherits","createClass","id","ref","placeholder","onClick","Component","connect","_ref","UnconnectedApp","displaySecretWord","toggleDisplaySecretWord","setState","resetWord","window","location","reload","getSecretWord","src_Congrats","Input","src_GuessedWords","randomWords","exactly","maxLength","Boolean","hostname","match","ReactDOM","render","es","store","src_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.c3eeb82d.chunk.js","sourcesContent":["import { getLetterMatchCount } from \"../helpers\";\r\nimport randomWords from \"random-words\";\r\n\r\nexport const actionTypes = {\r\n  CORRECT_GUESS: \"CORRECT_GUESS\",\r\n  GUESS_WORD: \"GUESS_WORD\",\r\n  SET_SECRET_WORD: \"SET_SECRET_WORD\"\r\n};\r\n\r\nexport const guessWord = guessedWord => {\r\n  return function(dispatch, getState) {\r\n    const secretWord = getState().secretWord;\r\n    const letterMatchCount = getLetterMatchCount(guessedWord, secretWord);\r\n\r\n    dispatch({\r\n      type: actionTypes.GUESS_WORD,\r\n      payload: { guessedWord, letterMatchCount }\r\n    });\r\n\r\n    if (guessedWord === secretWord) {\r\n      dispatch({\r\n        type: actionTypes.CORRECT_GUESS\r\n      });\r\n    }\r\n  };\r\n};\r\n\r\nexport const getSecretWord = () => {\r\n  let secretWord = randomWords({ exactly: 1, maxLength: 5 });\r\n  return dispatch => {\r\n    dispatch({\r\n      type: actionTypes.SET_SECRET_WORD,\r\n      payload: secretWord[0]\r\n    });\r\n  };\r\n};\r\n","export function getLetterMatchCount(guessedWord, secretWord) {\r\n  const secretLetterSet = new Set(secretWord.split(\"\"));\r\n  const guessedLetterSet = new Set(guessedWord.split(\"\"));\r\n  return [...secretLetterSet].filter(letter => guessedLetterSet.has(letter))\r\n    .length;\r\n}\r\n","import { combineReducers } from \"redux\";\r\nimport success from \"./successReducer\";\r\nimport guessedWords from \"./guessedWordsReducer\";\r\nimport secretWord from \"./secretWordReducer\";\r\n\r\nexport default combineReducers({\r\n  success,\r\n  guessedWords,\r\n  secretWord\r\n});\r\n","import { actionTypes } from \"../actions\";\r\n\r\nexport default (state = false, action) => {\r\n  switch (action.type) {\r\n    case actionTypes.CORRECT_GUESS:\r\n      return true;\r\n    default:\r\n      return state;\r\n  }\r\n};\r\n","import { actionTypes } from \"../actions\";\r\n\r\nexport default (state = [], action) => {\r\n  switch (action.type) {\r\n    case actionTypes.GUESS_WORD:\r\n      return [...state, action.payload];\r\n    default:\r\n      return state;\r\n  }\r\n};\r\n","import { actionTypes } from \"../actions\";\r\n\r\nexport default (state = null, action) => {\r\n  switch (action.type) {\r\n    case actionTypes.SET_SECRET_WORD:\r\n      return action.payload;\r\n    default:\r\n      return state;\r\n  }\r\n};\r\n","import { createStore, applyMiddleware } from \"redux\";\r\nimport ReduxThunk from \"redux-thunk\";\r\nimport rootReducer from \"./reducers\";\r\n\r\nexport const middlewares = [ReduxThunk];\r\nconst createStoreWithMiddleware = applyMiddleware(...middlewares)(createStore);\r\n\r\nexport default createStoreWithMiddleware(rootReducer);\r\n","import React from \"react\";\r\nimport PropTypes from \"prop-types\";\r\n\r\nconst GuessedWords = props => {\r\n  let contents;\r\n  if (props.guessedWords.length === 0) {\r\n    contents = (\r\n      <p data-test=\"guessed-instructions\">Try to guess a secret word!</p>\r\n    );\r\n  } else {\r\n    const guessedWordsRows = props.guessedWords.map((word, index) => (\r\n      <tr data-test=\"guessed-word\" key={index}>\r\n        <td>{word.guessedWord}</td>\r\n        <td>{word.letterMatchCount}</td>\r\n      </tr>\r\n    ));\r\n    contents = (\r\n      <div data-test=\"guessed-words\">\r\n        <p>Guessed Words</p>\r\n        <table>\r\n          <thead>\r\n            <tr>\r\n              <th>Guess</th>\r\n              <th>Matching Letters</th>\r\n            </tr>\r\n          </thead>\r\n          <tbody>{guessedWordsRows}</tbody>\r\n        </table>\r\n      </div>\r\n    );\r\n  }\r\n  return <div data-test=\"component-guessed-words\">{contents}</div>;\r\n};\r\n\r\nGuessedWords.propTypes = {\r\n  guessedWords: PropTypes.arrayOf(\r\n    PropTypes.shape({\r\n      guessedWord: PropTypes.string.isRequired,\r\n      letterMatchCount: PropTypes.number.isRequired\r\n    })\r\n  ).isRequired\r\n};\r\n\r\nexport default GuessedWords;\r\n","import React from \"react\";\r\nimport PropTypes from \"prop-types\";\r\nimport \"./App.scss\";\r\n\r\nconst Congrats = props => {\r\n  if (props.success) {\r\n    return (\r\n      <div data-test=\"component-congrats\" className=\"congrats-div\">\r\n        <p data-test=\"congrats-message\">Congrats! You guessed the word!</p>\r\n      </div>\r\n    );\r\n  } else {\r\n    return <div data-test=\"component-congrats\" />;\r\n  }\r\n};\r\n\r\nCongrats.propTypes = {\r\n  success: PropTypes.bool.isRequired\r\n};\r\n\r\nexport default Congrats;\r\n","import React, { Component } from \"react\";\r\nimport { connect } from \"react-redux\";\r\nimport { guessWord } from \"./actions\";\r\n\r\nexport class UnconnectedInput extends Component {\r\n  inputBox = React.createRef();\r\n\r\n  submitGuessedWord = event => {\r\n    event.preventDefault();\r\n    const guessedWord = this.inputBox.current.value;\r\n    if (guessWord && guessedWord.length > 7) {\r\n      alert(\"The can not be longer than 7 characters\");\r\n    } else if (\r\n      guessedWord &&\r\n      guessedWord.length > 0 &&\r\n      guessedWord.length <= 7\r\n    ) {\r\n      this.props.guessWord(guessedWord);\r\n    }\r\n    this.inputBox.current.value = \"\";\r\n  };\r\n\r\n  render() {\r\n    const contents = this.props.success ? null : (\r\n      <form className=\"form-inline\">\r\n        <input\r\n          id=\"word-guess\"\r\n          ref={this.inputBox}\r\n          data-test=\"input-box\"\r\n          className=\"mb-2 mx-sm-3\"\r\n          type=\"text\"\r\n          placeholder=\"enter guess\"\r\n        />\r\n        <button\r\n          data-test=\"submit-button\"\r\n          className=\"btn btn-primary mb-2\"\r\n          onClick={this.submitGuessedWord}\r\n          type=\"submit\"\r\n        >\r\n          Submit\r\n        </button>\r\n      </form>\r\n    );\r\n\r\n    return <div data-test=\"component-input\">{contents}</div>;\r\n  }\r\n}\r\n\r\nconst mapStateToProps = ({ success }) => {\r\n  return { success };\r\n};\r\n\r\nexport default connect(\r\n  mapStateToProps,\r\n  { guessWord }\r\n)(UnconnectedInput);\r\n","import React, { Component } from \"react\";\nimport { connect } from \"react-redux\";\nimport \"./App.scss\";\n\nimport GuessedWords from \"./GuessedWords\";\nimport Congrats from \"./Congrats\";\nimport Input from \"./Input\";\nimport { getSecretWord } from \"./actions\";\n\nexport class UnconnectedApp extends Component {\n  state = {\n    displaySecretWord: false\n  };\n\n  componentDidMount() {\n    // get the secret word\n    this.props.getSecretWord();\n  }\n\n  toggleDisplaySecretWord = () => {\n    this.setState({\n      displaySecretWord: true\n    });\n  };\n\n  resetWord = () => {\n    window.location.reload();\n  };\n\n  render() {\n    return (\n      <div className=\"container\">\n        <h1>Jotto</h1>\n        {this.props.success ? (\n          <p\n            data-test=\"reset-word-paragraph\"\n            className=\"help-paragraph\"\n            onClick={this.resetWord}\n          >\n            Guess a different word\n          </p>\n        ) : this.state.displaySecretWord ? (\n          <p data-test=\"secret-word-paragraph\">\n            The secret word is {this.props.secretWord}\n          </p>\n        ) : (\n          <p\n            data-test=\"show-secret-word\"\n            onClick={this.toggleDisplaySecretWord}\n            className=\"help-paragraph\"\n          >\n            Show the secret word\n          </p>\n        )}\n        <Congrats success={this.props.success} />\n        <Input />\n        <GuessedWords guessedWords={this.props.guessedWords} />\n      </div>\n    );\n  }\n}\n\nconst mapStateToProps = state => {\n  const { success, guessedWords, secretWord } = state;\n  return { success, guessedWords, secretWord };\n};\n\nexport default connect(\n  mapStateToProps,\n  { getSecretWord }\n)(UnconnectedApp);\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.scss\";\nimport { Provider } from \"react-redux\";\nimport store from \"./configureStore\";\n\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nReactDOM.render(\n  <Provider store={store}>\n    <App />\n  </Provider>,\n  document.getElementById(\"root\")\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}